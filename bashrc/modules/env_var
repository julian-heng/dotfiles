#!/usr/bin/env bash

#########################
##### Env Variables #####
#########################
# shellcheck disable=2034,2163
# vim: syntax=bash

# Helper function
append_path()   { [[ -d "${1}" ]] && PATH="${PATH}:${1}"; }
prepend_path()  { [[ -d "${1}" ]] && PATH="${1}:${PATH}"; }
is_installed()  { type -p "${1}" > /dev/null 2>&1; }
export_if_set() { [[ "${!1}" ]] && export "${1}"; }

# Custom scripts
[[ "${module_dir}" ]] && {
    script_dir="${module_dir/'bashrc/modules'/'scripts'}"
    append_path "${script_dir}/info"
    append_path "${script_dir}/utils"
}

if [[ "${distro:-}" == "MacOS" ]]; then
    # Python binaries
    shopt -s nullglob
    for dir in "${HOME}/Library/Python/"*"/bin"; do
        append_path "${dir}"
    done
    shopt -u nullglob

    # Qt binaries
    prepend_path "/usr/local/opt/qt/bin"
else
    # Local binaries
    append_path "${HOME}/.local/bin"
fi

is_installed "go" && {
    # Go binaries
    append_path "${HOME}/.go/bin"

    # Go environment
    GOPATH="${HOME}/.go"
}


is_installed "npm" && {
    # Npm binaries
    append_path "${HOME}/.npm/bin"
}

is_installed "cargo" && {
    # Cargo binaries
    append_path "${HOME}/.cargo/bin"
}

is_installed "docker" && [[ -S "${XDG_RUNTIME_DIR}/docker.sock" ]] && {
    DOCKER_HOST="unix://${XDG_RUNTIME_DIR}/docker.sock"
}

HISTTIMEFORMAT="%m/%d - %H:%M:%S: "
HISTCONTROL="ignoreboth"
HISTSIZE="-1"
HISTFILESIZE="-1"
EDITOR="vim"
PS4='+${BASH_SOURCE:+${BASH_SOURCE}:}${LINENO:+${LINENO}:}${FUNCNAME:+${FUNCNAME}:} '
GPG_TTY="$(tty)"

[[ ! "${MAKEFLAGS}" ]] && {
    case "${OSTYPE:-$(uname -s)}" in
        "Darwin"|"darwin"*)
            cores="$(sysctl -n hw.logicalcpu_max)"
        ;;

        "Linux"|"linux"*|"MSYS"*|"msys")
            [[ -f "/proc/cpuinfo" ]] && {
                while read -r i; do
                    [[ "$i" =~ ^processor ]] && \
                        ((cores++))
                done < /proc/cpuinfo
            }
        ;;

        "FreeBSD"|"freebsd"*)
            cores="$(sysctl -n hw.ncpu)"
        ;;
    esac
    MAKEFLAGS="-j${cores:-1}"
}

[[ "${distro}" == "MacOS" ]] && is_installed "Xquartz" && {
    shopt -s nullglob
    while [[ ! "${DISPLAY}" ]] && read -r line; do
        [[ -e "${line}" ]] && DISPLAY="${line}"
    done < <(printf "%s\\n" /private/tmp/com.apple.launchd.**/*xquartz*)
    shopt -u nullglob
}

_GIT_LOG_FORMAT=(
    "┌[%C(bold blue)%H%C(reset)]%C(auto)%d%C(reset)%n"
    "└──[%C(bold cyan)%aD%C(reset)]: %C(bold green)%ar%C(reset)%n%n"
    "%w(0,4,4)Author:  %an %C(dim white)<%ae>%C(reset)%n"
    "%w(0,4,4)Subject: %s%n"
    "%w(0,4,4)%+b%n"
)

IFS="" GIT_LOG_FORMAT="${_GIT_LOG_FORMAT[*]}"

#####################
##### Man Pages #####
#####################

LESS_TERMCAP_mb="${fb[1]:-}" # enter blinking mode - red
LESS_TERMCAP_md="${fb[5]:-}" # enter double-bright mode - bold, magenta
LESS_TERMCAP_me="${reset:-}" # turn off all appearance modes (mb, md, so, us)
LESS_TERMCAP_se="${reset:-}" # leave standout mode
LESS_TERMCAP_so="${fb[3]:-}" # enter standout mode - yellow
LESS_TERMCAP_ue="${reset:-}" # leave underline mode
LESS_TERMCAP_us="${fb[6]:-}" # enter underline mode - cyan
: "${reset}"                 # reset colours for debugging

###################
##### Exports #####
###################

export_if_set "PATH"
export_if_set "HISTCONTROL"
export_if_set "HISTTIMEFORMAT"
export_if_set "HISTSIZE"
export_if_set "HISTFILESIZE"
export_if_set "EDITOR"
export_if_set "PS4"
export_if_set "GPG_TTY"

export_if_set "GOPATH"
export_if_set "DOCKER_HOST"
export_if_set "MAKEFLAGS"

[[ "${distro}" == "MacOS" ]] && \
    export_if_set "DISPLAY"

export_if_set "GIT_LOG_FORMAT"

export_if_set "LESS_TERMCAP_mb"
export_if_set "LESS_TERMCAP_md"
export_if_set "LESS_TERMCAP_me"
export_if_set "LESS_TERMCAP_se"
export_if_set "LESS_TERMCAP_so"
export_if_set "LESS_TERMCAP_ue"
export_if_set "LESS_TERMCAP_us"

unset exist_and_is_dir
unset append_path
unset prepend_path
unset is_installed
unset export_if_set
