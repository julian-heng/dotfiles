#!/usr/bin/env bash

##################
##### Prompt #####
##################
# vim: syntax=bash

prompter()
{
    local exit="$?"

    __get_git_branch_status()
    {
        [[ "$1" == *"$2 "[[:digit:]]* ]] && {
            status="${1##*"$2"}"
            status="${status%%,*}"
            status="${status/]}"
            status="${status//[[:space:]]}"
            printf "%s" "${status}"
        }
    }

    __get_git_branch()
    {
        case "$1" in
            *"No commits"*|*"Initial commit"*)
                branch="master"
            ;;

            *"no branch"*)
                branch="$(git rev-parse --short HEAD)"
            ;;

            *)
                branch="${1%%\...*}"
                branch="${branch//#}"
                branch="${branch//[[:space:]]}"
            ;;
        esac
        printf "%s" "${branch}"
    }

    _git_prompt()
    {
        local _git_branch
        local _git_prompt
        local num_staged
        local num_changed
        local num_conflicts
        local num_untracked
        local git_prompt

        # Git status symbols and algorithm referenced from
        #   - https://github.com/magicmonty/bash-git-prompt/blob/master/gitstatus.sh
        #   - https://git-scm.com/docs/git-status

        { [[ -d ".git" ]] || git rev-parse --git-dir > /dev/null 2>&1; } && {
            while IFS=$'\n' read -r i; do
                status="${i:0:2}"
                while [[ -n "${status}" ]]; do
                    case "${status}" in
                        "##")
                            _git_branch="$(__get_git_branch "${i}")"
                            _git_behind="$(__get_git_branch_status "${i}" "behind")"
                            _git_ahead="$(__get_git_branch_status "${i}" "ahead")"
                            break
                        ;;

                        "??")       ((num_untracked++)); break ;;
                        "U"?|?"U"|\
                        "DD"|"AA")  ((num_conflicts++)); break ;;
                        ?"M"|?"D")  ((num_changed++)) ;;
                        ?" ") ;;
                        "U")        ((num_conflicts++)) ;;
                        " ") ;;
                        *)          ((num_staged++)) ;;
                    esac
                    status="${status:0:${#status} - 1}"
                done
            done < <(git status --porcelain --branch)

            _git_branch="${_git_branch:+-[${c2}${_git_branch}${reset}}"
            _git_prompt=(
                "${_git_behind:+${fb[7]}↓${_git_behind}}"
                "${_git_ahead:+${fb[7]}↑${_git_ahead}}"
                "${num_conflicts:+${f[1]}✖${num_conflicts}}"
                "${num_changed:+${f[4]}✚${num_changed}}"
                "${num_staged:+${f[6]}●${num_staged}}"
                "${num_untracked:+${reset}${bold}…${num_untracked}}"
            )

            IFS="" git_prompt="${_git_prompt[*]}"

            ((BASH_VERSINFO[0] < 5)) && \
                git_prompt="${git_prompt//$'\n'}"

            IFS="" \
            git_prompt="${_git_branch}${git_prompt:+|${git_prompt}}${reset}]"
        }

        printf "%s" "${git_prompt}"
    }

    dir_prompt()
    {
        local _PWD
        cwd="\\w"
        cwd="${cwd@P}"
        cwd="${cwd#/}"

        IFS='/' read -ra parts <<< "${cwd:-/}"

        for part in "${parts[@]:0:${#parts[@]}-1}"; do
            unset in_PWD
            unset in_part
            IFS=" " read -ra in_part <<< "${part}"
            for i in "${in_part[@]}"; do
                [[ "$i" == "."* ]] && in_PWD="${in_PWD}${i:0:2}" || in_PWD="${in_PWD}${i:0:1}"
            done
            _PWD="${_PWD}/${in_PWD}"
        done

        _PWD="${_PWD}/${parts[-1]}"

        [[ "${_PWD}" =~ ^"/~" ]] && \
            _PWD="${_PWD:1}"

        ((${#_PWD} > 24)) && \
            _PWD="${parts[-1]}"

        printf "%s" "${_PWD:-/}"
    }

    local dir
    local git
    local c1
    local c2
    local head
    local -a prompt_line

    unset prompt_line
    unset PS1

    if ((EUID == 0)); then
        c1="${fb[1]}"
        c2="${fb[1]}"
        head="#"
    else
        c1="${fb[2]}"
        c2="${fb[4]}"
        head="$"
    fi

    ((exit != 0)) && \
        head="[\[${fb[1]}\]${exit}\[${reset}\]]${head}"

    [[ ! "${userhost}" ]] && {
        user="${USER:-\\u}"
        host="${HOSTNAME:-\\w}"
        host="${host%%.*}"
        userhost="${c1}${user}${reset}@${c1}${host}${reset}"
        export userhost
    }

    dir="${c2}$(dir_prompt)${reset}"
    git="$(_git_prompt)"

    [[ "${VIRTUAL_ENV}" ]] && \
        other=" (${c2}venv${reset})"

    prompt_line+=("┌[${userhost}]: (${dir})${git}${other}")
    prompt_line+=("└${head} ")
    IFS=$'\n' PS1="${prompt_line[*]}"
    export PS1

    unset -f __get_git_branch_status
    unset -f __get_git_branch
    unset -f _git_prompt
    unset -f dir_prompt
}

PROMPT_COMMAND="prompter; history -a"
