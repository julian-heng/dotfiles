#!/usr/bin/env bash

#############################
##### Aliases/Functions #####
#############################
# vim: syntax=bash

gcll()
{
    local -a args
    local -a repo_list
    local repo

    while (($# > 0)); do
        case "$1" in
            "http"*) repo_list+=("$1") ;;
            *) args+=("$1") ;;
        esac
        shift
    done

    for repo in "${repo_list[@]}"; do
        git clone "${repo}" "${args[@]}"
    done
}

glog()
{
    [[ ! ${GIT_LOG_FORMAT} ]] && {
        _GIT_LOG_FORMAT=(
            "┌[%C(bold blue)%H%C(reset)]%C(auto)%d%C(reset)%n"
            "└──[%C(bold cyan)%aD%C(reset)]: %C(bold green)%ar%C(reset)%n%n"
            "%w(0,4,4)Author:  %an %C(dim white)<%ae>%C(reset)%n"
            "%w(0,4,4)Subject: %s%n"
            "%w(0,4,4)%+b%n"
        )

        IFS="" GIT_LOG_FORMAT="${_GIT_LOG_FORMAT[*]}"
        export GIT_LOG_FORMAT
    }

    git log --color=always --graph --format=format:"${GIT_LOG_FORMAT}" "$@"
}

man()
{
    MANWIDTH="$((${COLUMNS:-100} > 100 ? 100 : COLUMNS))" command man "$@"
}

catm()
{
    (("$#" == 0)) && return
    [[ ! "${COLUMNS}" ]] && \
        shopt -s checkwinsize; (:;:)

    local line
    eval printf -v line "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"

    printf "%s\\n" "${line}"
    printf "%s\\n" "$1"
    printf "%s\\n" "${line}"
    cat "$1"
    printf "%s\\n" "${line}"

    for i in "${@:1}"; do
        printf "\\n%s\\n" "${line}"
        printf "%s\\n" "$i"
        printf "%s\\n" "${line}"
        cat "$i"
        printf "\\n%s\\n" "${line}"
    done
}

mpv-loop()
{
    (($# > 2)) && \
        if (($# > 3)); then
            mpv "$1" --start "$2" \
                     --ab-loop-a "$2" \
                     --ab-loop-b "$3" \
                     --audio-pitch-correction=no \
                     --af-add=scaletempo=speed=both \
                     --speed="$4" \
                     "${@:4}"
        else
            mpv "$1" --start "$2" --ab-loop-a "$2" --ab-loop-b "$3" "${@:3}"
        fi
}

mpv-speed()
{
    (($# > 1)) && \
        mpv "$1" --audio-pitch-correction=no \
                 --af-add=scaletempo=speed=both \
                 --speed="$2" \
                 "${@:2}"
}

alias cb="cd - > /dev/null 2>&1"
alias dl="aria2c --dir=\${HOME}/Downloads/"

alias gp="git pull"
alias gpp="git push"
alias grm="git rm"
alias gcl="git clone"
alias gstat="git status --branch"
alias gdiff="git diff --color=always"

alias grep="grep --color=always"
alias yt2mp3="youtube-dl --extract-audio --audio-format=mp3 --audio-quality=0"
alias l="ls"

case "${distro:-}" in
    "MacOS"|"FreeBSD")
        alias ls="ls -G"
        alias ll="ls -G -l"
        alias la="ls -G -a"
        alias lal="ls -G -a -l"
    ;;

    *)
        alias ls="ls --color --classify"
        alias ll="ls --color --classify -l"
        alias la="ls --color --classify -a"
        alias lal="ls --color --classify -a -l"
    ;;
esac


[[ "${OSTYPE:-$(uname -s)}" =~ (L|l)inux ]] && \
    alias open="xdg-open"

case "${distro:-}" in
    "MacOS") alias update="brew -v update && brew -v upgrade && brew -v upgrade --casks" ;;
    "Ubuntu"*|"Debian"*|"Raspbian"*|"LinuxMint"*)
        alias update="sudo apt update && sudo apt upgrade"
    ;;

    "Arch"*)
        if type -p yay > /dev/null; then
            alias update="yay"
        else
            alias update="sudo pacman -Syu"
        fi
    ;;

    "Fedora"|"CentOS"*)
        if type -p dnf > /dev/null; then
            alias update="sudo dnf update"
        elif type -p yum > /dev/null; then
            alias update="sudo yum update"
        else
            printf "%sError%s: Cannot find dnf or yum, 'update' alias not set\\n" "${fb[1]:-}" "${reset:-}" >&2
        fi
    ;;

    "VoidLinux") alias update="sudo xbps-install -Su" ;;
    "Gentoo")
        alias update='
            printf "%s\\n" "Do it yourself"
            printf "%s\\n" "=============="
            printf "%s\\n" "# emerge --sync"
            printf "%s\\n" "# emerge-webrsync"
            printf "%s\\n" "# emerge --update --changed-use --deep --ask --with-bdeps=y @world"
            printf "%s\\n" "# emerge --ask --verbose --depclean"'
    ;;

    "FreeBSD") alias update="sudo pkg update && sudo pkg upgrade" ;;
    "Windows") alias update="choco upgrade all" ;;
    "") printf "%sError%s: Cannot detect distro, 'update' alias not set\\n" "${fb[1]:-}" "${reset:-}" >&2 ;;
    *) printf "%sError%s: Unknown distro, 'update' alias not set\\n" "${fb[1]:-}" "${reset:-}" >&2 ;;
esac
