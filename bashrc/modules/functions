#!/usr/bin/env bash

#####################
##### Functions #####
#####################
# vim: syntax=bash

gcll()
{
    local -a args
    local -a repo_list
    local repo

    while (($# > 0)); do
        case "$1" in
            "http"*) repo_list+=("$1") ;;
            *) args+=("$1") ;;
        esac
        shift
    done

    for repo in "${repo_list[@]}"; do
        git clone "${repo}" "${args[@]}"
    done
}

glog()
{
    [[ ! ${GIT_LOG_FORMAT} ]] && {
        _GIT_LOG_FORMAT=(
            "┌[%C(bold blue)%H%C(reset)]%C(auto)%d%C(reset)%n"
            "└──[%C(bold cyan)%aD%C(reset)]: %C(bold green)%ar%C(reset)%n%n"
            "%w(0,4,4)Author:  %an %C(dim white)<%ae>%C(reset)%n"
            "%w(0,4,4)Subject: %s%n"
            "%w(0,4,4)%+b%n"
        )

        IFS="" GIT_LOG_FORMAT="${_GIT_LOG_FORMAT[*]}"
        export GIT_LOG_FORMAT
    }

    git log --color=always --graph --format=format:"${GIT_LOG_FORMAT}" "$@"
}

gppo()
{
    git push -u origin "$(git rev-parse --abbrev-ref HEAD)"
}

man()
{
    MANWIDTH="$((${COLUMNS:-100} > 100 ? 100 : COLUMNS))" command man "$@"
}

catm()
{
    (("$#" == 0)) && return
    [[ ! "${COLUMNS}" ]] && \
        shopt -s checkwinsize; (:;:)

    local line
    eval printf -v line "%0.s=" "{1..${COLUMNS:-$(tput cols)}}"

    printf "%s\\n" "${line}"
    printf "%s\\n" "$1"
    printf "%s\\n" "${line}"
    cat "$1"
    printf "%s\\n" "${line}"

    for i in "${@:1}"; do
        printf "\\n%s\\n" "${line}"
        printf "%s\\n" "$i"
        printf "%s\\n" "${line}"
        cat "$i"
        printf "\\n%s\\n" "${line}"
    done
}

mpv-loop()
{
    (($# > 2)) && \
        if (($# > 3)); then
            mpv "$1" --start "$2" \
                     --ab-loop-a "$2" \
                     --ab-loop-b "$3" \
                     --audio-pitch-correction=no \
                     --af-add=scaletempo=speed=both \
                     --speed="$4" \
                     "${@:4}"
        else
            mpv "$1" --start "$2" --ab-loop-a "$2" --ab-loop-b "$3" "${@:3}"
        fi
}

mpv-speed()
{
    (($# > 1)) && \
        mpv "$1" --audio-pitch-correction=no \
                 --af-add=scaletempo=speed=both \
                 --speed="$2" \
                 "${@:2}"
}

pdfmerge()
{
    gs -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE="$1" -dBATCH "${@:2}"
}

mp42gif()
{
    palette="$(mktemp).png"
    infile="$1"
    outfile="$2"
    height="${3:-$(ffprobe \
        -i "${infile}" \
        -v error \
        -select_streams v \
        -show_entries stream=height \
        -of csv=p=0:s=x)}"
    common_filters="fps=24,scale=-1:${height}"
    ffmpeg \
        -i "${infile}" \
        -vf "${common_filters}:flags=lanczos,palettegen" \
        -y "${palette}"
    ffmpeg \
        -i "${infile}" \
        -i "${palette}" \
        -lavfi "${common_filters}:flags=lanczos [x]; [x][1:v] paletteuse" \
        -y "${outfile}"
    [[ -f "${palette}" ]] && \
        rm "${palette}"
}
