#!/usr/bin/env bash

##########################
##### Sourcing files #####
##########################
# shellcheck disable=1090,2148,2154
# vim: syntax=bash

__secure_source()
{
    [[ ! -f "${1}" ]] && \
        return 1
    source "${1}"
    return 0
}


secure_source()
{
    if ! __secure_source "${1}"; then
        printf "%s\\n" "${fb[1]}Error:${reset} \"${1}\" is missing"
    fi
}

get_distro()
{
    case "${OSTYPE:-$(uname -s)}" in
        "Darwin"|"darwin"*)
            distro="MacOS"
        ;;

        "Linux"|"linux"*)
            if [[ -f "/etc/lsb-release" ]]; then
                while read -r line && [[ ! "${distro}" ]]; do
                    [[ "${line}" =~ 'DISTRIB_ID' ]] && \
                        distro="${line/'DISTRIB_ID='}"
                done < /etc/lsb-release
            elif [[ -f "/etc/os-release" ]]; then
                while read -r line && [[ ! "${distro}" ]]; do
                    [[ "${line}" =~ ^'NAME' ]] && {
                        distro="${line/'NAME='}"
                        distro="${distro//\"}"
                    }
                done < /etc/os-release
            fi
        ;;

        "FreeBSD"|"freebsd"*)
            distro="FreeBSD"
        ;;

        "MSYS"*|"msys")
            distro="Windows"
        ;;

        "")
            printf "%s\\n" "Error: Cannot detect os" >&2
        ;;
    esac
    printf "%s" "${distro}"
}

get_full_path()
{
    target="$1"

    if [[ -f "${target}" ]]; then
        filename="${target##*/}"
        [[ "${filename}" == "${target}" ]] && \
            target="./${target}"
        target="${target%/*}"
        cd "${target}" || exit
        full_path="${PWD}/${filename}"
    elif [[ -d "${target}" ]]; then
        cd "${target}" || exit
        full_path="${PWD}"
    fi

    printf "%s" "${full_path%/}"
}

get_module_dir()
{
    if type -p readlink > /dev/null 2>&1; then
        exe="readlink"
    elif type -p greadlink > /dev/null 2>&1; then
        exe="greadlink"
    elif type -p realpath > /dev/null 2>&1; then
        exe="realpath"
    fi

    if [[ "${exe}" ]]; then
        module_dir="$({ "${exe}" -f "${BASH_SOURCE[0]}" || "${exe}" "${BASH_SOURCE[0]}"; } 2> /dev/null)"
        module_dir="${module_dir%/*}/modules"
    else
        module_dir="${HOME}/.dotfiles/bashrc/modules"
    fi

    printf "%s" "${module_dir}"
}

main()
{
    distro="$(get_distro)"
    module_dir="$(get_module_dir)"

    # Default modules
    modules=(
        "${module_dir}/colours"
        "${module_dir}/aliases"
        "${module_dir}/env_var"
        "${module_dir}/functions"
        "${module_dir}/prompt"
    )

    # Load bash-completion module if not already sourced
    ! type -p __load_completion > /dev/null && \
        if [[ -f "/usr/local/share/bash-completion/bash_completion" ]]; then
            modules+=("/usr/local/share/bash-completion/bash_completion")
        elif [[ -f "/usr/share/bash-completion/bash_completion" ]]; then
            modules+=("/usr/share/bash-completion/bash_completion")
        fi

    # Load command_not_found module if command_not_found_handle is not set
    ! type -p command_not_found_handle > /dev/null && \
        [[ -f "${module_dir}/command_not_found" ]] && \
            modules+=("${module_dir}/command_not_found")

    # Source .venv/bin/activate if it exists
    [[ -e "./.venv/bin/activate" ]] && \
        modules+=("./.venv/bin/activate")

    for i in "${modules[@]}"; do
        secure_source "${i}"
    done

    # Load custom bashrc
    __secure_source "${HOME}/.bashrc_custom"
}

[[ "$-" == *"i"* ]] && main

unset __secure_source
unset secure_source
unset get_distro
unset get_full_path
unset get_module_dir
unset main
